openapi: 3.0.1
info:
  title: BooKMate
  description: 'This is a basic flask based Book Management app. Users can add their own books and browse other users books as well.  You can find the source code and documentation for this app
    here [BooKMate APIs collection](https://github.com/vishu221b/bukme-REST-APIs) .'
  termsOfService: https://github.com/vishu221b/bukme-REST-APIs
  contact:
    email: vishal.dogra738@gmail.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
servers:
- url: /
tags:
- name: User
  description: Register a new user
- name: User Authentication
  description: Log in-to or out-of the app
- name: User Operations
  description: Basic user operations
  # externalDocs:
  #   description: Find out more
  #   url: http://swagger.io
- name: Book Operations
  description: Access to book operations
- name: Admin Panel
  description: Basic admin priviledges
paths:
  /user/fetch/{scope}:
    get:
      tags:
      - User
      summary: Get all active users
      operationId: getAllActiveUsers
      parameters:
      - name: scope
        in: path
        description: Scope of the request
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AllUserFetchResponseBody'
                description: Array of all the active users
        404:
          description: Not found
        500:
          description: Internal sever error
  /user/register:
    post:
      tags:
      - User
      summary: Registers a new user
      operationId: registerNewUser
      requestBody:
        description: User details body for registration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistrationResponseBody'
        400:
          description: Bad Request Input
        404:
          description: Not found
        500:
          description: Internal server error
  /user/login:
    post:
      tags:
      - User Authentication
      summary: Generate session
      operationId: generateAppAccess
      requestBody:
        description: User Credentials
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserLoginRequestBody'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponseBody'
        400:
          description: Bad request
        404:
          description: Not found
        500:
          description: Internal server error
  /user/logout:
    delete:
      tags:
      - User Authentication
      summary: Revoke session
      operationId: revokeAppAccess
      responses:
        200:
          description: Success
        403:
          description: Resource forbidden
        404:
          description: Not found
        500:
          description: Internal server error
      security:
        - bearerAuth: []
  /user:
    get:
      tags:
      - User Operations
      summary: Fetch the details of the current user
      operationId: getCurrentUserDetails
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSensitiveDetailsResponseBody'
        400:
          description: Bad request
      security:
      - bearerAuth: []
  /user/update/:
    put:
      tags:
      - User Operations
      summary: Update general details of the user
      description: Update genral details of the logged in user.
      operationId: updateUserDetails
      requestBody:
        description: User details update request body
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserDetailsUpdateRequestBody'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              'schema':
                $ref: '#/components/schemas/UserDetailsUpdateResponseBody'
        400:
          description: Bad request
        404:
          description: Not found
      security:
      - bearerAuth: []
  /user/social/{action}/{userEmail}/:
    post:
      tags:
        - User Operations
      summary: Follow Unfollow user
      description: Follow the user with the email
      operationId: followUser
      parameters:
        - name: action
          in: path
          description: The action to be performed
          required: true
          schema:
            type: string
            enum: [follow, unfollow]
        - name: userEmail
          in: path
          description: The email of the user that needs to be followed
          required: true
          schema:
            type: string
            format: email
      responses:
        200:
          description: Success
        400:
          description: Invalid input supplied
        404:
          description: User not found
      security:
        - bearerAuth: []
  /user/perform/{action}/{userEmail}:
    post:
      tags:
        - User Operations
      summary: Block Unblock a user
      description: Block or Unblock the user with the email
      operationId: blockUnblockUser
      parameters:
        - name: action
          in: path
          description: Action that needs to be performed
          required: true
          schema:
            enum:
              - block
              - unblock
        - name: userEmail
          in: path
          description: The email of the user that needs to be blocked or unblocked
          required: true
          schema:
              type: string
              format: email
      responses:
        200:
          description: Success
        400:
          description: Invalid input supplied
        404:
          description: User not found
      security:
        - bearerAuth: []
  /user/{user-email}:
    delete:
      tags:
      - User Operations
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: user-email
        in: path
        description: The email of the user that needs to be deleted
        required: true
        schema:
          type: string
          format: email
      responses:
        200:
          description: Success
        400:
          description: Invalid input supplied
        404:
          description: User not found
      security:
        - bearerAuth: []
  /user/update/email:
    patch:
      tags:
      - User Operations
      summary: Updates user email
      operationId: updateUserEmail
      requestBody:
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEmailUpdateRequestBody'
      responses:
        200:
          description: Success
        400:
          description: Invalid input supplied
      security:
        - bearerAuth: []
  /user/update/username:
    patch:
      tags:
      - User Operations
      summary: Updates username for the user
      operationId: updateUserName
      requestBody:
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNameUpdateRequestBody'
      responses:
        200:
          description: Success
        400:
          description: Invalid input supplied
      security:
        - bearerAuth: []
  /user/update/password:
    patch:
      tags:
      - User Operations
      summary: Updates user password
      operationId: updateUserPassword
      requestBody:
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordUpdateRequestBody'
      responses:
        200:
          description: Success
        400:
          description: Invalid input supplied
      security:
        - bearerAuth: []
  /book/fetch/all:
    get:
      tags:
      - Book Operations
      summary: Returns all the active books for all users
      description: Returns a list of all the currently active books
      operationId: getActiveBooksForAllUsers
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreateBookResponse'
      security:
      - bearerAuth: []
  /book:
    get:
      tags:
      - Book Operations
      summary: Returns all the books for the current user
      description: Returns a list of active/inactive books for the current user
      operationId: getBooksForCurrentUser
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                 response:
                  type: array
                  items:
                    $ref: '#/components/schemas/CreateBookResponse'
      security:
      - bearerAuth: []
    post:
      tags:
      - Book Operations
      summary: Creates a new book
      operationId: createBook
      requestBody:
        description: Book details
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateBookRequestBody'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBookResponse'
        400:
          description: Invalid Order
          content: {}
      security:
      - bearerAuth: []
    put:
      tags:
      - Book Operations
      summary: Update book details
      description: Update book details for the book with id.
      operationId: updateBookDetails
      requestBody:
        description: Update book request details
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdateBookRequestBody'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              'schema':
                $ref: '#/components/schemas/UpdateBookResponse'
        400:
          description: Bad request
        404:
          description: Not found
      security:
      - bearerAuth: []
  /book/upload:
    post:
      tags:
        - Book Operations
      summary: Uploads a book document
      operationId: uploadBookDocumentFile
      parameters:
        - name: bookId
          in: query
          description: Id of the book for which the file is uploaded
          required: true
          schema:
            type: string
        - name: privacyScope
          in: query
          description: Scope of privacy for the book
          required: true
          schema:
            type: string
            enum: [PUBLIC, PRIVATE]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                documentFile:
                  type: string
                  format: binary
      responses:
        200:
          description: successful operation
      security:
        - bearerAuth: []
  /book/download:
    get:
      tags:
        - Book Operations
      summary: Download a Book Document
      operationId: downloadBookDocumentFile
      parameters:
        - name: bookId
          in: query
          description: Id of the book for which link is required
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
      security:
      - bearerAuth: []
  /book/{action}/{bookId}:
    post:
      tags:
      - Book Operations
      summary: Restore/Delete book by ID
      description: For valid response enter valid book ID with length 24
      operationId: deleteRestoreBookById
      parameters:
      - name: action
        in: path
        description: Action to be performed
        required: true
        schema:
          type: string
          enum: [RESTORE, DELETE]
      - name: bookId
        in: path
        description: ID of book that needs to be restored
        required: true
        schema:
          type: string
          format: hexadecimal
      responses:
        200:
          description: Book successfully restored
        400:
          description: Invalid ID supplied
        403:
          description: Access forbidden
        404:
          description: Not found
        409:
          description: Book already active
        500:
          description: Unexpected error
      security:
        - bearerAuth: []
  /book/favourite/{bookId}/mark:
    post:
      tags:
        - Book Operations
      summary: Add book with given id to favourites
      description: For valid response enter valid book ID with length 24
      operationId: markBookAsFavourite
      parameters:
        - name: bookId
          in: path
          description: ID of the book
          required: true
          schema:
            type: string
      responses:
        200:
          description: Book successfully marked as favourite
        400:
          description: Invalid ID supplied
        403:
          description: Access forbidden
        404:
          description: Not found
        409:
          description: Book already active
        500:
          description: Unexpected error
      security:
        - bearerAuth: []
  /book/favourite/{bookId}/remove:
    delete:
      tags:
        - Book Operations
      summary: Add book with given id to favourite books
      description: For valid response enter valid book ID with length 24
      operationId: removeBookFromFavourites
      parameters:
        - name: bookId
          in: path
          description: ID of the book
          required: true
          schema:
            type: string
      responses:
        200:
          description: Book successfully removed from favourite
        400:
          description: Invalid ID supplied
        403:
          description: Access forbidden
        404:
          description: Not found
        409:
          description: Book already active
        500:
          description: Unexpected error
      security:
        - bearerAuth: []
  /admin/session/details:
    post:
      tags:
        - Admin Panel
      summary: Fetch session details for token
      operationId: getUserSessionDetails
      requestBody:
        description: Session token to fetch details for
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionDetailsRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionDetailsResponse'
        400:
          description: Bad request
      security:
        - bearerAuth: []
  /admin/user/mark/{action}/{userEmail}:
    post:
      tags:
        - Admin Panel
      summary: Activate Deactivate user
      description: Admins can activate deacativate any user
      operationId: activateDeactivateUserFromAdminPanel
      parameters:
        - name: action
          in: path
          description: Action that needs to be performed
          required: true
          schema:
            type: string
            enum: [ACTIVE, INACTIVE]
        - name: userEmail
          in: path
          description: The email of the user that needs to be activated or deactivated
          required: true
          schema:
            type: string
            format: email
      responses:
        200:
          description: Success
        400:
          description: Invalid input supplied
        404:
          description: User not found
      security:
        - bearerAuth: []
  /admin/privileges/{action}/{userEmail}:
    put:
      tags:
        - Admin Panel
      summary: Grant/Revoke admin rights to/for user
      description: Grants or Revoke the user with admin privileges
      operationId: grantRevokeAdminAccessToUser
      parameters:
        - name: action
          in: path
          description: Action that needs to be performed
          required: true
          schema:
            type: string
            enum: [GRANT, REVOKE]
        - name: userEmail
          in: path
          description: The email of the user
          required: true
          schema:
            type: string
            format: email
      responses:
        200:
          description: Success
        400:
          description: Invalid input supplied
        404:
          description: User not found
      security:
        - bearerAuth: []
  /admin/book/restore/{bookId}:
    patch:
      tags:
        - Admin Panel
      summary: Restore any deleted book by it's ID
      description: For valid response enter valid book ID with length 24
      operationId: restoreBookByIdAdminPanel
      parameters:
        - name: bookId
          in: path
          description: ID of book that needs to be restored
          required: true
          schema:
            type: string
            format: hexadecimal
      responses:
        200:
          description: Book successfully restored
        400:
          description: Invalid ID supplied
        403:
          description: Access forbidden
        404:
          description: Not found
        409:
          description: Book already active
        500:
          description: Unexpected error
      security:
        - bearerAuth: []
  /admin/book/delete/{bookId}:
    delete:
      tags:
        - Admin Panel
      summary: Delete any book by it's ID
      description: For valid response enter valid book ID with length 24
      operationId: deleteBookByIdAdminPanel
      parameters:
        - name: bookId
          in: path
          description: ID of book that needs to be deleted
          required: true
          schema:
            type: string
            format: hexadecimal
      responses:
        200:
          description: Book successfully deleted
        400:
          description: Invalid ID supplied
        403:
          description: Access forbidden
        404:
          description: Not found
        409:
          description: Book already deleted
        500:
          description: Unexpected error
      security:
        - bearerAuth: []
components:
  schemas:
    UserRegistrationRequest:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        date_of_birth:
          type: string
          format: date
        phone_number:
          type: string
          format: int64
          minLength: 9
          maxLength: 10
        email:
          type: string
        username:
          type: string
        password:
          type: string
      required: [first_name, date_of_birth, phone_number, email, username,password]
    AllUserFetchResponseBody:
      type: object
      properties:
        id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        date_of_birth:
          type: string
          format: date
        email:
          type: string
          format: email
        username:
          type: string
    UserLoginRequestBody:
      type: object
      properties:
        email/username:
          description: Either one of email and username can be used to login
          type: string
        password:
          type: string
      required: [email, password]
    UserDetailsUpdateRequestBody:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        date_of_birth:
          type: string
          format: date
        phone_number:
          type: string
          format: int64
          minLength: 9
          maxLength: 10
        email:
          type: string
          format: email
        username:
          type: string
          format: string
    UserEmailUpdateRequestBody:
      type: object
      properties:
        oldEmail:
          type: string
          format: email
        newEmail:
          type: string
          format: email
      required: [oldEmail, newEmail]
    UserNameUpdateRequestBody:
      type: object
      properties:
        oldUsername:
          type: string
        newUsername:
          type: string
      required: [oldUsername, newUsername]
    PasswordUpdateRequestBody:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
      required:
      - oldPassword
      - newPassword
    CreateBookRequestBody:
      type: object
      properties:
        name:
          type: string
        author:
          type: string
        genre:
          type: string
        summary:
          type: string
        barcode:
          type: string
      required: [name, author, genre]
    UpdateBookRequestBody:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        author:
          type: string
        genre:
          type: string
        summary:
          type: string
        barcode:
          type: string
      required: [id]
    UserRegistrationResponseBody:
      type: object
      $ref: '#/components/schemas/UserSensitiveDetailsResponseBody'
    UserSensitiveDetailsResponseBody:
      type: object
      properties:
        id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        date_of_birth:
          type: string
          format: date
        phone_number:
          type: string
          format: int64
          minLength: 9
          maxLength: 10
        email:
          type: string
          format: email
        username:
          type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        password:
          type: string
        is_admin:
          type: boolean
        fav_books:
          type: array
          items:
            $ref: '#/components/schemas/EmbeddedBookDetailsBody'
          description: Array of favourite books
        followers:
          type: array
            $ref: '#/components/schemas/EmbeddedUserDetailsBody'
        following:
          type: array
            $ref: '#/components/schemas/EmbeddedUserDetailsBody'
        blocked:
          type: array
            $ref: '#/components/schemas/EmbeddedUserDetailsBody'
    UserGeneralDetailsBody:
          type: object
          properties:
            id:
              type: string
            first_name:
              type: string
            last_name:
              type: string
            date_of_birth:
              type: string
              format: date
            phone_number:
              type: string
              format: int64
              minLength: 9
              maxLength: 10
            email:
              type: string
              format: email
            username:
              type: string
            is_active:
              type: boolean
            created_at:
              type: string
              format: date-time
    UserLoginResponseBody:
      type: object
      properties:
        access_token:
          type: string
    UserDetailsUpdateResponseBody:
      type: object
      properties:
        response:
          type: object
          properties:
            updatedUser:
              type: object
              $ref: '#/components/schemas/AllUserFetchResponseBody'
    CreateBookResponse:
      type: object
      properties:
        id:
          type: string
          format: hexadecimal
        book_name:
          type: string
        author:
          type: string
        book_genre:
          type: string
        summary:
          type: string
        barcode:
          type: string
        created_at:
          type: string
          format: date-time
        created_by:
          type: string
          format: email
        last_updated_at:
          type: string
          format: date-time
        last_updated_by:
          type: string
          format: email
        is_active:
          type: boolean
    EmbeddedUserDetailsBody:
      type: object
      properties:
        id:
          type: string
          format: string
        book_name:
          type: string
        author:
          type: string
        summary:
          type: string
    EmbeddedBookDetailsBody:
      type: object
      properties:
        id:
          type: string
          format: string
        book_name:
          type: string
        author:
          type: string
        summary:
          type: string
    UpdateBookResponse:
      type: object
      properties:
        response:
          type: object
          properties:
            Success: 
              type: string
            book:
              $ref: '#/components/schemas/CreateBookResponse'
      description: Success response on book updation
    SessionDetailsRequest:
      type: object
      properties:
        session_token:
          type: string
    SessionDetailsResponse:
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
          format: date-time
        user_details:
          $ref: '#/components/schemas/UserGeneralDetailsBody'
        access_token:
          type: string
        access_token_jti:
          type: string
        revoked_at:
          type: date-time
        is_revoked:
          type: boolean
        expiry:
          type: string
          format: date-time
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
